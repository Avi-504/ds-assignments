#include<stdio.h>
#include<stdlib.h>
#include<limits.h>
/**BY AVI**/
struct node
{
	int datas;
	struct node *r;
	struct node *l;
}*root=NULL;


struct nodes
{
	struct node *data;
	struct nodes *next;
}*top=NULL;


void push(struct node *x)
{
	struct nodes *temp;
	temp=(struct nodes *)malloc(sizeof(struct nodes));
	temp->data=x;
	temp->next=top;
	top=temp;
}


struct node  *pop()
{
	struct nodes *temp;
	temp=top;
	struct node *x=temp->data;
	top=top->next;
	free(temp);
	return x;
}


int stop1()
{
	if(top==NULL)
		return INT_MAX;
	else
		return top->data->datas;

}
int height(struct node *p)
{
	int x,y;
	if(p==NULL)
		return 0;

	x=height(p->l);
	y=height(p->r);
	return x>y?x+1:y+1;
}

void imbal(struct node *q)
{
	if(q==NULL)
		return;
	int x=height(q->l)-height(q->r);
	printf("B.F of node %d is %d\n",q->datas,x);
	if(x!=-1&&x!=0&&x!=1)
		printf("Thus node %d is imbalanced\n\n",q->datas);
	else
		printf("Thus node %d is balanced\n\n",q->datas);

	imbalance(q->l);
	imbalance(q->r);
}

int main()
{
	printf("Enter the no. of node you want to enter in binary search tree\n");
	int n;
	int i=0;
	scanf("%d",&n);
	int A[n];
	printf("Enter the elements of binary search tree in preorder\n");
	for(;i<n;i++)
	{
		scanf("%d",&A[i]);
	}
	i=0;
	root=(struct node *)malloc(sizeof(struct node));
	root->datas=A[i++];
	root->r=root->l=NULL;
	struct node *p=root;
	
	while(i<n)
	{
		if(A[i]<p->dat)
		{
			struct node *t;
			t=(struct node *)malloc(sizeof(struct node));
			t->datas=A[i++];
			t->r=t->l=NULL;
			p->l=t;
			push(p);
			p=t;
		}
		else
		{
			if(A[i]>p->datas&&A[i]<stop1())
			{
				struct node *t;
				t=(struct node *)malloc(sizeof(struct node));
				t->datas=A[i++];
				t->r=t->l=NULL;
				p->r=t;
				p=t;
			}
			else
				p=pop();
		}
	}
	imbal(root);
	return 0;
}
